#!/bin/bash

# Default file paths
CONVERSATION_FILE="/tmp/ivim_conversation_$(date "+%Y%m%d%H%M%S").json"
TMP_FILE="/tmp/ivim_buffer.txt"

# Help message
show_help() {
  cat << EOF
Usage: innovim [options]
Options:
  -h        Show help message.
  -v        Increase verbosity of log messages.
  -f FILE   Specify a conversation file.
EOF
}

# Update conversation file with new entry
update_conversation() {
  local role="$1"
  local content="$2"
  jq --arg content "$content" '. += [{"role": "'$role'", "content": $content}]' "$CONVERSATION_FILE" > tmp.$$ && mv tmp.$$ "$CONVERSATION_FILE"
}

# Handle command with router and action handler
handle_command() {
  local input="$1"
  local cmd_identifier=$(commandrouter "$input")
  if [[ "$cmd_identifier" != "unknown" ]]; then
    actionhandler "$cmd_identifier" "$input"
  else
    echo "$input"
  fi
}

# Main interaction loop
interact() {
  while true; do
    echo "Provide your command (type 'exit' to quit):"
    read -r user_input
    [[ "$user_input" == "exit" ]] && { logger -p user.info "Exiting."; break; }

    # Handle immediate commands or update conversation
    output=$(handle_command "$user_input")
    if [[ "$output" != "$user_input" ]]; then
      logger -p user.info "Command output: $output"
      continue
    fi
    update_conversation "user" "$user_input"

    # Get and refine assistant's response
    response=$(brainbridge --conversation "$CONVERSATION_FILE")
    echo "$response" > "$TMP_FILE"
    nvim "$TMP_FILE"
    refined_response=$(<"$TMP_FILE")

    # Handle refined response or update conversation
    output=$(handle_command "$refined_response")
    if [[ "$output" == "$refined_response" ]]; then
      update_conversation "assistant" "$refined_response"
    fi
    logger -p user.info "Assistant's response: $refined_response"
  done
}

# Parse command-line options
while getopts "vhf:" opt; do
  case $opt in
    v) VERBOSITY=$((VERBOSITY+1)) ;;
    h) show_help; exit 0 ;;
    f) CONVERSATION_FILE="$OPTARG" ;;
    *) show_help >&2; exit 1 ;;
  esac
done

# Check for conversation file existence or create it
if [ ! -f "$CONVERSATION_FILE" ]; then
  echo '[{"role": "system", "content": "You are a helpful assistant."}]' > "$CONVERSATION_FILE"
  logger -p user.info "Conversation file initialized at $CONVERSATION_FILE"
fi

# Start the interaction loop
interact
