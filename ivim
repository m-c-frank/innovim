#!/bin/bash

# Default file paths
CONVERSATION_FILE="/tmp/ivim_conversation_$(date "+%Y%m%d%H%M%S").json"
TMP_FILE="/tmp/ivim_buffer.txt"
VERBOSITY=0

# Help message
show_help() {
  cat << EOF
Usage: ivim [options]
Options:
  -h        Show help message.
  -v        Increase verbosity of log messages.
  -f FILE   Specify a conversation file.
EOF
}

# Handle command with router and action handler
handle_command() {
  local input="$1"
  easylog DEBUG "Handling command: $input"
  # Assuming actionhandler is in the PATH or provide the full path to actionhandler script
  actionhandler "$@"
}

get_response(){
  local conversation_json=$(<"$CONVERSATION_FILE")
  echo "$(brainbridge --conversation "$conversation_json")"
}

# Main interaction loop
interact() {
  easylog INFO "Interaction loop started."
  while true; do
    echo "Provide your command (type 'exit' to quit):"
    read -r user_input
    easylog INFO "User input: $user_input"
    if [[ "$user_input" == "exit" ]]; then
      easylog INFO "User requested to exit."
      break
    fi

    easylog DEBUG "Processing user input."
    output=$(handle_command $user_input) # Input is passed without quotes to allow actionhandler to split it into arguments
    if [[ "$output" ]]; then
      easylog INFO "Command output processed: $output"
    fi

    easylog DEBUG "Updating conversation with user input."
    convoupdater "$CONVERSATION_FILE" "user" "$user_input"

    easylog DEBUG "Fetching and processing response."
    response=$(get_response)
    echo "$response" | jq -r '.[0].content' > "$TMP_FILE"
    
    # Use editbuf tool to let the user edit the response
    refined_response=$(editbuf "$(cat "$TMP_FILE")")
    
    # Extract 'content' from the refined response
    content=$(echo "$refined_response")
    
    easylog DEBUG "Refined response processed."
    convoupdater "$CONVERSATION_FILE" "assistant" "$content"

    easylog INFO "Assistant's response: $content"
  done
  easylog INFO "Interaction loop ended."
}

# Parse command-line options
while getopts "vhf:" opt; do
  case $opt in
    v) VERBOSITY=$((VERBOSITY+1)) ;;
    h) show_help; exit 0 ;;
    f) CONVERSATION_FILE="$OPTARG" ;;
    *) show_help >&2; exit 1 ;;
  esac
done

# Ensure the external scripts are executable and in the PATH
if ! command -v easylog &> /dev/null || ! command -v convoupdater &> /dev/null || ! command -v editbuf &> /dev/null; then
    echo "The required tools (easylog, convoupdater, and editbuf) are not in PATH or not executable." >&2
    exit 1
fi

# Check for conversation file existence or create it
if [ ! -f "$CONVERSATION_FILE" ]; then
  easylog INFO "Creating a new conversation file."
  echo '[{"role": "system", "content": "You are a helpful assistant."}]' > "$CONVERSATION_FILE"
  easylog INFO "Conversation file initialized at $CONVERSATION_FILE"
else
  easylog INFO "Using existing conversation file at $CONVERSATION_FILE"
fi

# Start the interaction loop
easylog INFO "Starting ivim script."
interact
