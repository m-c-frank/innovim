#!/bin/bash

source easylog
source convmanager

# Default directory path for conversation
CONVERSATION_DIR="/tmp/ivim_conversation_$(date "+%Y%m%d%H%M%S")"
VERBOSITY=0

# Help message
show_help() {
  cat << EOF
Usage: ivim [options]
Options:
  -h        Show help message.
  -v        Increase verbosity of easylog messages.
  -d DIR    Specify a conversation directory.
EOF
}

# Function to append a message to the conversation using convmanager
append_to_conversation() {
  local role="$1"
  local content="$2"
  # Here we call the add_message function from convmanager script
  add_message "$role" "$content" "$CONVERSATION_DIR"
}

# Function to process commands and append both user and assistant messages
process_response() {
  local user_input="$1"

  # Create a temporary file for the user to edit the input
  local temp_file_input=$(mktemp)
  echo "$user_input" > "$temp_file_input"
  nvim "$temp_file_input"
  
  # Read the edited user input back into a variable
  user_input=$(<"$temp_file_input")

  # Process any commands in the user input
  local processed_input=$(execute_or_echo "$user_input")

  # Append user message to the conversation
  append_to_conversation "user" "$processed_input"

  # Simulate getting a response (replace with actual command if needed)
  # Get the response from brainbridge
  local conversation_json="{\"role\":\"user\",\"content\":\"$processed_input\"}" # This should be the actual JSON structure used
  local response=$(brainbridge --conversation "$conversation_json")
  elog DEBUG "Brainbridge response: $response"

  # Extract the response content from the JSON
  local response_content=$(echo "$response" | jq -r '.[0].content')
  local temp_file_response=$(mktemp) # Define the temporary file
  echo "$response_content" > "$temp_file_response"
  nvim "$temp_file_response"
  
  # Read the edited response content back into a variable
  local refined_content=$(<"$temp_file_response")
  elog INFO "Refined content: $refined_content"

  local processed_response=$(execute_or_echo "$refined_content")

  # Append assistant message to the conversation
  append_to_conversation "assistant" "$processed_response"

  # Clean up the temporary files
  rm "$temp_file_input" "$temp_file_response"
}

# Parse command-line options
while getopts "vhd:" opt; do
  case $opt in
    v) VERBOSITY=$((VERBOSITY+1)) ;;
    h) show_help; exit 0 ;;
    d) CONVERSATION_DIR="$OPTARG" ;;
    *) show_help >&2; exit 1 ;;
  esac
done

# Initialize conversation directory or use existing one
initialize_conversation_directory "$CONVERSATION_DIR"

# Main interaction loop
interact() {
  elog INFO "Interaction loop started."
  while true; do
    echo "Provide your command (type 'exit' to quit):"
    read -r user_input
    elog INFO "User input: $user_input"
    
    if [[ "$user_input" == "exit" ]]; then
      elog INFO "User requested to exit."
      break
    fi

    process_response "$user_input"
  done
  elog INFO "Interaction loop ended."
}

# Start the interaction loop
elog INFO "Starting ivim script."
interact
