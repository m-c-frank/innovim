#!/bin/bash

# Default file paths
CONVERSATION_FILE="/tmp/ivim_conversation_$(date "+%Y%m%d%H%M%S").json"
TMP_FILE="/tmp/ivim_buffer.txt"

# Global variable for verbosity level
EASYLOG_VERBOSITY=0

# Help message
show_help() {
  cat << EOF
Usage: ivim [options]
Options:
  -h        Show help message.
  -v        Increase verbosity of log messages.
  -f FILE   Specify a conversation file.
EOF
}

# Update conversation file with new entry
update_conversation() {
  local role="$1"
  local content="$2"
  # Assuming convoupdater is in the PATH or provide the full path to convoupdater script
  convoupdater "$CONVERSATION_FILE" "$role" "$content"
}

# Handle command with router and action handler
handle_command() {
  local input="$*"
  # Call the external command router script with the input
  # Assuming commandrouter and actionrouter are in the PATH or provide the full path to these scripts
  local command_output
  command_output=$(commandrouter "$input")
  
  # If commandrouter outputs a known command, it is passed to actionrouter
  if [[ $command_output != "unknown" ]]; then
    actionrouter $command_output
  else
    echo "Command not recognized by commandrouter."
  fi
}

get_response(){
  local conversation_json=$(<"$CONVERSATION_FILE")
  echo "$(brainbridge --conversation "$conversation_json")"
}

# Main interaction loop
interact() {
  easylog INFO "Interaction loop started."
  while true; do
    echo "Provide your command (type 'exit' to quit):"
    read -r user_input
    easylog INFO "User input: $user_input"
    if [[ "$user_input" == "exit" ]]; then
      easylog INFO "User requested to exit."
      break
    fi

    easylog DEBUG "Processing user input."
    output=$(handle_command "$user_input") # Input is passed with quotes to handle multi-word arguments
    if [[ "$output" ]]; then
      easylog INFO "Command output processed: $output"
    fi

    easylog DEBUG "Updating conversation with user input."
    update_conversation "user" "$user_input"

    easylog DEBUG "Fetching and processing response."
    response=$(get_response)
    echo "$response" > "$TMP_FILE"

    easylog DEBUG "nvim will now open to refine response."
    nvim "$TMP_FILE"
    
    refined_response=$(<"$TMP_FILE")
    easylog DEBUG "Refined response ready for processing."
    
    # Pass the refined response to the command router
    handle_command "$refined_response" 

    easylog INFO "Assistant's response: $refined_response"
  done
  easylog INFO "Interaction loop ended."
}

# Alias for easylog with verbosity control
easylog() {
  EASYLOG_VERBOSITY=$EASYLOG_VERBOSITY easylog "$@"
}

# Parse command-line options
while getopts "vhf:" opt; do
  case $opt in
    v) EASYLOG_VERBOSITY=$((EASYLOG_VERBOSITY+1))
       export EASYLOG_VERBOSITY ;;
    h) show_help; exit 0 ;;
    f) CONVERSATION_FILE="$OPTARG" ;;
    *) show_help >&2; exit 1 ;;
  esac
done

# Check for conversation file existence or create it
if [ ! -f "$CONVERSATION_FILE" ]; then
  echo '[{"role": "system", "content": "You are a helpful assistant."}]' > "$CONVERSATION_FILE"
  easylog INFO "Conversation file initialized at $CONVERSATION_FILE"
else
  easylog INFO "Using existing conversation file at $CONVERSATION_FILE"
fi

# Start the interaction loop
easylog INFO "Starting ivim script."
interact
