#!/bin/bash

# Default file paths
CONVERSATION_FILE="/tmp/ivim_conversation_$(date "+%Y%m%d%H%M%S").json"
VERBOSITY=0

allowed_tools="git ls mkdir tee touch rm cp mv chmod chown wget curl python pip docker"

# Logging function
log() {
  local level="$1"
  local message="$2"
  local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  case "$level" in
    DEBUG)
      [[ $VERBOSITY -ge 3 ]] && echo "$timestamp [DEBUG] $message"
      ;;
    INFO)
      [[ $VERBOSITY -ge 2 ]] && echo "$timestamp [INFO] $message"
      ;;
    WARN)
      [[ $VERBOSITY -ge 1 ]] && echo "$timestamp [WARN] $message"
      ;;
    ERROR)
      echo "$timestamp [ERROR] $message"
      ;;
    *)
      echo "$timestamp [UNKNOWN] Unknown log level: $level"
      ;;
  esac
}

# Help message
show_help() {
  cat << EOF
Usage: ivim [options]
Options:
  -h        Show help message.
  -v        Increase verbosity of log messages.
  -f FILE   Specify a conversation file.
EOF
}

# Function to append a message to the conversation
append_to_conversation() {
  local role="$1"
  local content="$2"
  jq --arg role "$role" --arg content "$content" '. += [{"role": $role, "content": $content}]' "$CONVERSATION_FILE" > temp.json && mv temp.json "$CONVERSATION_FILE"
}


is_allowed_tool() {
  if grep -q "^$1\$" <<< "$allowed_tools"; then
    return 0  # true, the tool is allowed
  else
    return 1  # false, the tool is not allowed
  fi
}

execute_or_echo_command() {
  read -r command args <<< "$@"
  if $is_allowed; then
    # Execute the command in a new shell instance
    log DEBUG "Executing command: $command $args"
    bash -c "$command $args"
  else
    # If not recognized, just echo back the input
    echo "$@"
  fi
}


# Replace the process_commands function with the new execute_or_echo_command
process_commands() {
  local content="$1"
  local output=$(execute_or_echo_command "$content")
  echo "Commandrouter output: '$output'" >&2  # Debug: Print the output to standard error for debugging
  echo "$output"
}


process_response() {
  local user_input="$1"
  # Process any commands in the user input
  user_input=$(process_commands "$user_input")
  append_to_conversation "user" "$user_input"
  
  # Get the updated conversation JSON
  local conversation_json=$(<"$CONVERSATION_FILE")
  
  # Get the response from brainbridge
  local response=$(brainbridge --conversation "$conversation_json")
  log DEBUG "Brainbridge response: $response"

  # Extract the response content from the JSON
  local response_content=$(echo "$response" | jq -r '.[0].content')
  temp_file=$(mktemp) # Define the temporary file
  echo "$response_content" > "$temp_file"
  nvim "$temp_file"
  
  # Read the edited response content back into a variable
  local refined_content=$(<"$temp_file")
  log INFO "Refined content: $refined_content"

  processed_content=$(process_commands "$refined_content")
  
  # Append the refined content using jq
  append_to_conversation "assistant" "$processed_content"
  
  # Print the updated conversation
  jq '.' "$CONVERSATION_FILE"

  # Clean up the temporary file
  rm "$temp_file"
}

# Main interaction loop
interact() {
  log INFO "Interaction loop started."
  while true; do
    echo "Provide your command (type 'exit' to quit):"
    read -r user_input
    log INFO "User input: $user_input"
    
    if [[ "$user_input" == "exit" ]]; then
      log INFO "User requested to exit."
      break
    fi

    process_response "$user_input"
  done
  log INFO "Interaction loop ended."
}

# Parse command-line options
while getopts "vhf:" opt; do
  case $opt in
    v) VERBOSITY=$((VERBOSITY+1)) ;;
    h) show_help; exit 0 ;;
    f) CONVERSATION_FILE="$OPTARG" ;;
    *) show_help >&2; exit 1 ;;
  esac
done

# Check for conversation file existence or create it with an initial system message
if [ ! -f "$CONVERSATION_FILE" ]; then
  log INFO "Creating a new conversation file."
  echo '[{"role": "system", "content": "You are a helpful assistant."}]' > "$CONVERSATION_FILE"
  log INFO "Conversation file initialized at $CONVERSATION_FILE"
else
  log INFO "Using existing conversation file at $CONVERSATION_FILE"
fi

# Start the interaction loop
log INFO "Starting ivim script."
interact
